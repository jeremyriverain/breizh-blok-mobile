// Mocks generated by Mockito 5.4.5 from annotations
// in breizh_blok_mobile/test/ui/core/widgets/downloads_area_button_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:breizh_blok_mobile/data/data_sources/api/api_client.dart'
    as _i8;
import 'package:breizh_blok_mobile/data/data_sources/api/model/api_order_param.dart'
    as _i11;
import 'package:breizh_blok_mobile/data/data_sources/local/app_database.dart'
    as _i2;
import 'package:breizh_blok_mobile/data/data_sources/local/model/downloaded_boulder_area.dart'
    as _i10;
import 'package:breizh_blok_mobile/data/data_sources/local/model/image_boulder_cache.dart'
    as _i12;
import 'package:drift/drift.dart' as _i4;
import 'package:drift/src/runtime/executor/stream_queries.dart' as _i5;
import 'package:flutter_cache_manager/flutter_cache_manager.dart' as _i7;
import 'package:http/http.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i9;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAppDatabase_0 extends _i1.SmartFake implements _i2.AppDatabase {
  _FakeAppDatabase_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeClient_1 extends _i1.SmartFake implements _i3.Client {
  _FakeClient_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _Fake$DbRequestsTable_2 extends _i1.SmartFake
    implements _i2.$DbRequestsTable {
  _Fake$DbRequestsTable_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _Fake$DbBoulderAreasTable_3 extends _i1.SmartFake
    implements _i2.$DbBoulderAreasTable {
  _Fake$DbBoulderAreasTable_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _Fake$AppDatabaseManager_4 extends _i1.SmartFake
    implements _i2.$AppDatabaseManager {
  _Fake$AppDatabaseManager_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDriftDatabaseOptions_5 extends _i1.SmartFake
    implements _i4.DriftDatabaseOptions {
  _FakeDriftDatabaseOptions_5(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeGeneratedDatabase_6 extends _i1.SmartFake
    implements _i4.GeneratedDatabase {
  _FakeGeneratedDatabase_6(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeMigrationStrategy_7 extends _i1.SmartFake
    implements _i4.MigrationStrategy {
  _FakeMigrationStrategy_7(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeStreamQueryUpdateRules_8 extends _i1.SmartFake
    implements _i4.StreamQueryUpdateRules {
  _FakeStreamQueryUpdateRules_8(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDatabaseConnection_9 extends _i1.SmartFake
    implements _i4.DatabaseConnection {
  _FakeDatabaseConnection_9(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeQueryExecutor_10 extends _i1.SmartFake implements _i4.QueryExecutor {
  _FakeQueryExecutor_10(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeStreamQueryStore_11 extends _i1.SmartFake
    implements _i5.StreamQueryStore {
  _FakeStreamQueryStore_11(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDatabaseConnectionUser_12 extends _i1.SmartFake
    implements _i4.DatabaseConnectionUser {
  _FakeDatabaseConnectionUser_12(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeMigrator_13 extends _i1.SmartFake implements _i4.Migrator {
  _FakeMigrator_13(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeFuture_14<T1> extends _i1.SmartFake implements _i6.Future<T1> {
  _FakeFuture_14(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeInsertStatement_15<T1 extends _i4.Table, D1> extends _i1.SmartFake
    implements _i4.InsertStatement<T1, D1> {
  _FakeInsertStatement_15(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeUpdateStatement_16<T extends _i4.Table, D> extends _i1.SmartFake
    implements _i4.UpdateStatement<T, D> {
  _FakeUpdateStatement_16(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeSimpleSelectStatement_17<T1 extends _i4.HasResultSet, D>
    extends _i1.SmartFake
    implements _i4.SimpleSelectStatement<T1, D> {
  _FakeSimpleSelectStatement_17(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeJoinedSelectStatement_18<FirstT extends _i4.HasResultSet, FirstD>
    extends _i1.SmartFake
    implements _i4.JoinedSelectStatement<FirstT, FirstD> {
  _FakeJoinedSelectStatement_18(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeBaseSelectStatement_19<Row> extends _i1.SmartFake
    implements _i4.BaseSelectStatement<Row> {
  _FakeBaseSelectStatement_19(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDeleteStatement_20<T1 extends _i4.Table, D1> extends _i1.SmartFake
    implements _i4.DeleteStatement<T1, D1> {
  _FakeDeleteStatement_20(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeSelectable_21<T> extends _i1.SmartFake implements _i4.Selectable<T> {
  _FakeSelectable_21(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeGenerationContext_22 extends _i1.SmartFake
    implements _i4.GenerationContext {
  _FakeGenerationContext_22(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeCacheManager_23 extends _i1.SmartFake implements _i7.CacheManager {
  _FakeCacheManager_23(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [ApiClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockApiClient extends _i1.Mock implements _i8.ApiClient {
  @override
  _i2.AppDatabase get database =>
      (super.noSuchMethod(
            Invocation.getter(#database),
            returnValue: _FakeAppDatabase_0(this, Invocation.getter(#database)),
            returnValueForMissingStub: _FakeAppDatabase_0(
              this,
              Invocation.getter(#database),
            ),
          )
          as _i2.AppDatabase);
  @override
  _i3.Client get httpClient =>
      (super.noSuchMethod(
            Invocation.getter(#httpClient),
            returnValue: _FakeClient_1(this, Invocation.getter(#httpClient)),
            returnValueForMissingStub: _FakeClient_1(
              this,
              Invocation.getter(#httpClient),
            ),
          )
          as _i3.Client);
  @override
  _i6.Future<String> get(
    Uri? uri, {
    Map<String, String>? headers,
    Duration? timeout = const Duration(seconds: 7),
    bool? offlineFirst = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #get,
              [uri],
              {
                #headers: headers,
                #timeout: timeout,
                #offlineFirst: offlineFirst,
              },
            ),
            returnValue: _i6.Future<String>.value(
              _i9.dummyValue<String>(
                this,
                Invocation.method(
                  #get,
                  [uri],
                  {
                    #headers: headers,
                    #timeout: timeout,
                    #offlineFirst: offlineFirst,
                  },
                ),
              ),
            ),
            returnValueForMissingStub: _i6.Future<String>.value(
              _i9.dummyValue<String>(
                this,
                Invocation.method(
                  #get,
                  [uri],
                  {
                    #headers: headers,
                    #timeout: timeout,
                    #offlineFirst: offlineFirst,
                  },
                ),
              ),
            ),
          )
          as _i6.Future<String>);
  @override
  String normalizeRequestPath(Uri? uri) =>
      (super.noSuchMethod(
            Invocation.method(#normalizeRequestPath, [uri]),
            returnValue: _i9.dummyValue<String>(
              this,
              Invocation.method(#normalizeRequestPath, [uri]),
            ),
            returnValueForMissingStub: _i9.dummyValue<String>(
              this,
              Invocation.method(#normalizeRequestPath, [uri]),
            ),
          )
          as String);
}

/// A class which mocks [AppDatabase].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppDatabase extends _i1.Mock implements _i2.AppDatabase {
  @override
  int get schemaVersion =>
      (super.noSuchMethod(
            Invocation.getter(#schemaVersion),
            returnValue: 0,
            returnValueForMissingStub: 0,
          )
          as int);
  @override
  _i2.$DbRequestsTable get dbRequests =>
      (super.noSuchMethod(
            Invocation.getter(#dbRequests),
            returnValue: _Fake$DbRequestsTable_2(
              this,
              Invocation.getter(#dbRequests),
            ),
            returnValueForMissingStub: _Fake$DbRequestsTable_2(
              this,
              Invocation.getter(#dbRequests),
            ),
          )
          as _i2.$DbRequestsTable);
  @override
  _i2.$DbBoulderAreasTable get dbBoulderAreas =>
      (super.noSuchMethod(
            Invocation.getter(#dbBoulderAreas),
            returnValue: _Fake$DbBoulderAreasTable_3(
              this,
              Invocation.getter(#dbBoulderAreas),
            ),
            returnValueForMissingStub: _Fake$DbBoulderAreasTable_3(
              this,
              Invocation.getter(#dbBoulderAreas),
            ),
          )
          as _i2.$DbBoulderAreasTable);
  @override
  _i2.$AppDatabaseManager get managers =>
      (super.noSuchMethod(
            Invocation.getter(#managers),
            returnValue: _Fake$AppDatabaseManager_4(
              this,
              Invocation.getter(#managers),
            ),
            returnValueForMissingStub: _Fake$AppDatabaseManager_4(
              this,
              Invocation.getter(#managers),
            ),
          )
          as _i2.$AppDatabaseManager);
  @override
  Iterable<_i4.TableInfo<_i4.Table, Object?>> get allTables =>
      (super.noSuchMethod(
            Invocation.getter(#allTables),
            returnValue: <_i4.TableInfo<_i4.Table, Object?>>[],
            returnValueForMissingStub: <_i4.TableInfo<_i4.Table, Object?>>[],
          )
          as Iterable<_i4.TableInfo<_i4.Table, Object?>>);
  @override
  List<_i4.DatabaseSchemaEntity> get allSchemaEntities =>
      (super.noSuchMethod(
            Invocation.getter(#allSchemaEntities),
            returnValue: <_i4.DatabaseSchemaEntity>[],
            returnValueForMissingStub: <_i4.DatabaseSchemaEntity>[],
          )
          as List<_i4.DatabaseSchemaEntity>);
  @override
  _i4.DriftDatabaseOptions get options =>
      (super.noSuchMethod(
            Invocation.getter(#options),
            returnValue: _FakeDriftDatabaseOptions_5(
              this,
              Invocation.getter(#options),
            ),
            returnValueForMissingStub: _FakeDriftDatabaseOptions_5(
              this,
              Invocation.getter(#options),
            ),
          )
          as _i4.DriftDatabaseOptions);
  @override
  _i4.GeneratedDatabase get attachedDatabase =>
      (super.noSuchMethod(
            Invocation.getter(#attachedDatabase),
            returnValue: _FakeGeneratedDatabase_6(
              this,
              Invocation.getter(#attachedDatabase),
            ),
            returnValueForMissingStub: _FakeGeneratedDatabase_6(
              this,
              Invocation.getter(#attachedDatabase),
            ),
          )
          as _i4.GeneratedDatabase);
  @override
  _i4.MigrationStrategy get migration =>
      (super.noSuchMethod(
            Invocation.getter(#migration),
            returnValue: _FakeMigrationStrategy_7(
              this,
              Invocation.getter(#migration),
            ),
            returnValueForMissingStub: _FakeMigrationStrategy_7(
              this,
              Invocation.getter(#migration),
            ),
          )
          as _i4.MigrationStrategy);
  @override
  _i4.StreamQueryUpdateRules get streamUpdateRules =>
      (super.noSuchMethod(
            Invocation.getter(#streamUpdateRules),
            returnValue: _FakeStreamQueryUpdateRules_8(
              this,
              Invocation.getter(#streamUpdateRules),
            ),
            returnValueForMissingStub: _FakeStreamQueryUpdateRules_8(
              this,
              Invocation.getter(#streamUpdateRules),
            ),
          )
          as _i4.StreamQueryUpdateRules);
  @override
  _i4.DatabaseConnection get connection =>
      (super.noSuchMethod(
            Invocation.getter(#connection),
            returnValue: _FakeDatabaseConnection_9(
              this,
              Invocation.getter(#connection),
            ),
            returnValueForMissingStub: _FakeDatabaseConnection_9(
              this,
              Invocation.getter(#connection),
            ),
          )
          as _i4.DatabaseConnection);
  @override
  _i4.SqlTypes get typeMapping =>
      (super.noSuchMethod(
            Invocation.getter(#typeMapping),
            returnValue: _i9.dummyValue<_i4.SqlTypes>(
              this,
              Invocation.getter(#typeMapping),
            ),
            returnValueForMissingStub: _i9.dummyValue<_i4.SqlTypes>(
              this,
              Invocation.getter(#typeMapping),
            ),
          )
          as _i4.SqlTypes);
  @override
  _i4.QueryExecutor get executor =>
      (super.noSuchMethod(
            Invocation.getter(#executor),
            returnValue: _FakeQueryExecutor_10(
              this,
              Invocation.getter(#executor),
            ),
            returnValueForMissingStub: _FakeQueryExecutor_10(
              this,
              Invocation.getter(#executor),
            ),
          )
          as _i4.QueryExecutor);
  @override
  _i5.StreamQueryStore get streamQueries =>
      (super.noSuchMethod(
            Invocation.getter(#streamQueries),
            returnValue: _FakeStreamQueryStore_11(
              this,
              Invocation.getter(#streamQueries),
            ),
            returnValueForMissingStub: _FakeStreamQueryStore_11(
              this,
              Invocation.getter(#streamQueries),
            ),
          )
          as _i5.StreamQueryStore);
  @override
  _i4.DatabaseConnectionUser get resolvedEngine =>
      (super.noSuchMethod(
            Invocation.getter(#resolvedEngine),
            returnValue: _FakeDatabaseConnectionUser_12(
              this,
              Invocation.getter(#resolvedEngine),
            ),
            returnValueForMissingStub: _FakeDatabaseConnectionUser_12(
              this,
              Invocation.getter(#resolvedEngine),
            ),
          )
          as _i4.DatabaseConnectionUser);
  @override
  _i6.Future<int> createOrUpdateRequest(_i2.DbRequest? request) =>
      (super.noSuchMethod(
            Invocation.method(#createOrUpdateRequest, [request]),
            returnValue: _i6.Future<int>.value(0),
            returnValueForMissingStub: _i6.Future<int>.value(0),
          )
          as _i6.Future<int>);
  @override
  _i6.Future<_i2.DbRequest?> requestById(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#requestById, [id]),
            returnValue: _i6.Future<_i2.DbRequest?>.value(),
            returnValueForMissingStub: _i6.Future<_i2.DbRequest?>.value(),
          )
          as _i6.Future<_i2.DbRequest?>);
  @override
  _i6.Future<int> createOrUpdateBoulderArea(_i2.DbBoulderArea? boulderArea) =>
      (super.noSuchMethod(
            Invocation.method(#createOrUpdateBoulderArea, [boulderArea]),
            returnValue: _i6.Future<int>.value(0),
            returnValueForMissingStub: _i6.Future<int>.value(0),
          )
          as _i6.Future<int>);
  @override
  _i6.Stream<List<_i10.DownloadedBoulderArea>> allDownloads({
    _i11.ApiOrderParam? orderParam = const _i11.ApiOrderParam(
      direction: 'desc',
      name: 'order[id]',
    ),
  }) =>
      (super.noSuchMethod(
            Invocation.method(#allDownloads, [], {#orderParam: orderParam}),
            returnValue: _i6.Stream<List<_i10.DownloadedBoulderArea>>.empty(),
            returnValueForMissingStub:
                _i6.Stream<List<_i10.DownloadedBoulderArea>>.empty(),
          )
          as _i6.Stream<List<_i10.DownloadedBoulderArea>>);
  @override
  _i6.Stream<_i2.DbBoulderArea?> watchDownload(String? iri) =>
      (super.noSuchMethod(
            Invocation.method(#watchDownload, [iri]),
            returnValue: _i6.Stream<_i2.DbBoulderArea?>.empty(),
            returnValueForMissingStub: _i6.Stream<_i2.DbBoulderArea?>.empty(),
          )
          as _i6.Stream<_i2.DbBoulderArea?>);
  @override
  _i4.Migrator createMigrator() =>
      (super.noSuchMethod(
            Invocation.method(#createMigrator, []),
            returnValue: _FakeMigrator_13(
              this,
              Invocation.method(#createMigrator, []),
            ),
            returnValueForMissingStub: _FakeMigrator_13(
              this,
              Invocation.method(#createMigrator, []),
            ),
          )
          as _i4.Migrator);
  @override
  _i6.Future<void> beforeOpen(
    _i4.QueryExecutor? executor,
    _i4.OpeningDetails? details,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#beforeOpen, [executor, details]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);
  @override
  _i6.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);
  @override
  _i6.Stream<T> createStream<T extends Object>(
    _i5.QueryStreamFetcher<T>? stmt,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#createStream, [stmt]),
            returnValue: _i6.Stream<T>.empty(),
            returnValueForMissingStub: _i6.Stream<T>.empty(),
          )
          as _i6.Stream<T>);
  @override
  T alias<T, D>(_i4.ResultSetImplementation<T, D>? table, String? alias) =>
      (super.noSuchMethod(
            Invocation.method(#alias, [table, alias]),
            returnValue: _i9.dummyValue<T>(
              this,
              Invocation.method(#alias, [table, alias]),
            ),
            returnValueForMissingStub: _i9.dummyValue<T>(
              this,
              Invocation.method(#alias, [table, alias]),
            ),
          )
          as T);
  @override
  void markTablesUpdated(Iterable<_i4.TableInfo<_i4.Table, dynamic>>? tables) =>
      super.noSuchMethod(
        Invocation.method(#markTablesUpdated, [tables]),
        returnValueForMissingStub: null,
      );
  @override
  void notifyUpdates(Set<_i4.TableUpdate>? updates) => super.noSuchMethod(
    Invocation.method(#notifyUpdates, [updates]),
    returnValueForMissingStub: null,
  );
  @override
  _i6.Stream<Set<_i4.TableUpdate>> tableUpdates([
    _i4.TableUpdateQuery? query = const _i4.TableUpdateQuery.any(),
  ]) =>
      (super.noSuchMethod(
            Invocation.method(#tableUpdates, [query]),
            returnValue: _i6.Stream<Set<_i4.TableUpdate>>.empty(),
            returnValueForMissingStub: _i6.Stream<Set<_i4.TableUpdate>>.empty(),
          )
          as _i6.Stream<Set<_i4.TableUpdate>>);
  @override
  _i6.Future<T> doWhenOpened<T>(
    _i6.FutureOr<T> Function(_i4.QueryExecutor)? fn,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#doWhenOpened, [fn]),
            returnValue:
                _i9.ifNotNull(
                  _i9.dummyValueOrNull<T>(
                    this,
                    Invocation.method(#doWhenOpened, [fn]),
                  ),
                  (T v) => _i6.Future<T>.value(v),
                ) ??
                _FakeFuture_14<T>(this, Invocation.method(#doWhenOpened, [fn])),
            returnValueForMissingStub:
                _i9.ifNotNull(
                  _i9.dummyValueOrNull<T>(
                    this,
                    Invocation.method(#doWhenOpened, [fn]),
                  ),
                  (T v) => _i6.Future<T>.value(v),
                ) ??
                _FakeFuture_14<T>(this, Invocation.method(#doWhenOpened, [fn])),
          )
          as _i6.Future<T>);
  @override
  _i4.InsertStatement<T, D> into<T extends _i4.Table, D>(
    _i4.TableInfo<T, D>? table,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#into, [table]),
            returnValue: _FakeInsertStatement_15<T, D>(
              this,
              Invocation.method(#into, [table]),
            ),
            returnValueForMissingStub: _FakeInsertStatement_15<T, D>(
              this,
              Invocation.method(#into, [table]),
            ),
          )
          as _i4.InsertStatement<T, D>);
  @override
  _i4.UpdateStatement<Tbl, R> update<Tbl extends _i4.Table, R>(
    _i4.TableInfo<Tbl, R>? table,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#update, [table]),
            returnValue: _FakeUpdateStatement_16<Tbl, R>(
              this,
              Invocation.method(#update, [table]),
            ),
            returnValueForMissingStub: _FakeUpdateStatement_16<Tbl, R>(
              this,
              Invocation.method(#update, [table]),
            ),
          )
          as _i4.UpdateStatement<Tbl, R>);
  @override
  _i4.SimpleSelectStatement<T, R> select<T extends _i4.HasResultSet, R>(
    _i4.ResultSetImplementation<T, R>? table, {
    bool? distinct = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#select, [table], {#distinct: distinct}),
            returnValue: _FakeSimpleSelectStatement_17<T, R>(
              this,
              Invocation.method(#select, [table], {#distinct: distinct}),
            ),
            returnValueForMissingStub: _FakeSimpleSelectStatement_17<T, R>(
              this,
              Invocation.method(#select, [table], {#distinct: distinct}),
            ),
          )
          as _i4.SimpleSelectStatement<T, R>);
  @override
  _i4.JoinedSelectStatement<T, R> selectOnly<T extends _i4.HasResultSet, R>(
    _i4.ResultSetImplementation<T, R>? table, {
    bool? distinct = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#selectOnly, [table], {#distinct: distinct}),
            returnValue: _FakeJoinedSelectStatement_18<T, R>(
              this,
              Invocation.method(#selectOnly, [table], {#distinct: distinct}),
            ),
            returnValueForMissingStub: _FakeJoinedSelectStatement_18<T, R>(
              this,
              Invocation.method(#selectOnly, [table], {#distinct: distinct}),
            ),
          )
          as _i4.JoinedSelectStatement<T, R>);
  @override
  _i4.BaseSelectStatement<_i4.TypedResult> selectExpressions(
    Iterable<_i4.Expression<Object>>? columns,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#selectExpressions, [columns]),
            returnValue: _FakeBaseSelectStatement_19<_i4.TypedResult>(
              this,
              Invocation.method(#selectExpressions, [columns]),
            ),
            returnValueForMissingStub:
                _FakeBaseSelectStatement_19<_i4.TypedResult>(
                  this,
                  Invocation.method(#selectExpressions, [columns]),
                ),
          )
          as _i4.BaseSelectStatement<_i4.TypedResult>);
  @override
  _i4.DeleteStatement<T, D> delete<T extends _i4.Table, D>(
    _i4.TableInfo<T, D>? table,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#delete, [table]),
            returnValue: _FakeDeleteStatement_20<T, D>(
              this,
              Invocation.method(#delete, [table]),
            ),
            returnValueForMissingStub: _FakeDeleteStatement_20<T, D>(
              this,
              Invocation.method(#delete, [table]),
            ),
          )
          as _i4.DeleteStatement<T, D>);
  @override
  _i6.Future<int> customUpdate(
    String? query, {
    List<_i4.Variable<Object>>? variables = const [],
    Set<_i4.ResultSetImplementation<dynamic, dynamic>>? updates,
    _i4.UpdateKind? updateKind,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #customUpdate,
              [query],
              {
                #variables: variables,
                #updates: updates,
                #updateKind: updateKind,
              },
            ),
            returnValue: _i6.Future<int>.value(0),
            returnValueForMissingStub: _i6.Future<int>.value(0),
          )
          as _i6.Future<int>);
  @override
  _i6.Future<int> customInsert(
    String? query, {
    List<_i4.Variable<Object>>? variables = const [],
    Set<_i4.ResultSetImplementation<dynamic, dynamic>>? updates,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #customInsert,
              [query],
              {#variables: variables, #updates: updates},
            ),
            returnValue: _i6.Future<int>.value(0),
            returnValueForMissingStub: _i6.Future<int>.value(0),
          )
          as _i6.Future<int>);
  @override
  _i6.Future<List<_i4.QueryRow>> customWriteReturning(
    String? query, {
    List<_i4.Variable<Object>>? variables = const [],
    Set<_i4.ResultSetImplementation<dynamic, dynamic>>? updates,
    _i4.UpdateKind? updateKind,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #customWriteReturning,
              [query],
              {
                #variables: variables,
                #updates: updates,
                #updateKind: updateKind,
              },
            ),
            returnValue: _i6.Future<List<_i4.QueryRow>>.value(<_i4.QueryRow>[]),
            returnValueForMissingStub: _i6.Future<List<_i4.QueryRow>>.value(
              <_i4.QueryRow>[],
            ),
          )
          as _i6.Future<List<_i4.QueryRow>>);
  @override
  _i4.Selectable<_i4.QueryRow> customSelect(
    String? query, {
    List<_i4.Variable<Object>>? variables = const [],
    Set<_i4.ResultSetImplementation<dynamic, dynamic>>? readsFrom = const {},
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #customSelect,
              [query],
              {#variables: variables, #readsFrom: readsFrom},
            ),
            returnValue: _FakeSelectable_21<_i4.QueryRow>(
              this,
              Invocation.method(
                #customSelect,
                [query],
                {#variables: variables, #readsFrom: readsFrom},
              ),
            ),
            returnValueForMissingStub: _FakeSelectable_21<_i4.QueryRow>(
              this,
              Invocation.method(
                #customSelect,
                [query],
                {#variables: variables, #readsFrom: readsFrom},
              ),
            ),
          )
          as _i4.Selectable<_i4.QueryRow>);
  @override
  _i4.Selectable<_i4.QueryRow> customSelectQuery(
    String? query, {
    List<_i4.Variable<Object>>? variables = const [],
    Set<_i4.ResultSetImplementation<dynamic, dynamic>>? readsFrom = const {},
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #customSelectQuery,
              [query],
              {#variables: variables, #readsFrom: readsFrom},
            ),
            returnValue: _FakeSelectable_21<_i4.QueryRow>(
              this,
              Invocation.method(
                #customSelectQuery,
                [query],
                {#variables: variables, #readsFrom: readsFrom},
              ),
            ),
            returnValueForMissingStub: _FakeSelectable_21<_i4.QueryRow>(
              this,
              Invocation.method(
                #customSelectQuery,
                [query],
                {#variables: variables, #readsFrom: readsFrom},
              ),
            ),
          )
          as _i4.Selectable<_i4.QueryRow>);
  @override
  _i6.Future<void> customStatement(String? statement, [List<dynamic>? args]) =>
      (super.noSuchMethod(
            Invocation.method(#customStatement, [statement, args]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);
  @override
  _i6.Future<T> transaction<T>(
    _i6.Future<T> Function()? action, {
    bool? requireNew = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #transaction,
              [action],
              {#requireNew: requireNew},
            ),
            returnValue:
                _i9.ifNotNull(
                  _i9.dummyValueOrNull<T>(
                    this,
                    Invocation.method(
                      #transaction,
                      [action],
                      {#requireNew: requireNew},
                    ),
                  ),
                  (T v) => _i6.Future<T>.value(v),
                ) ??
                _FakeFuture_14<T>(
                  this,
                  Invocation.method(
                    #transaction,
                    [action],
                    {#requireNew: requireNew},
                  ),
                ),
            returnValueForMissingStub:
                _i9.ifNotNull(
                  _i9.dummyValueOrNull<T>(
                    this,
                    Invocation.method(
                      #transaction,
                      [action],
                      {#requireNew: requireNew},
                    ),
                  ),
                  (T v) => _i6.Future<T>.value(v),
                ) ??
                _FakeFuture_14<T>(
                  this,
                  Invocation.method(
                    #transaction,
                    [action],
                    {#requireNew: requireNew},
                  ),
                ),
          )
          as _i6.Future<T>);
  @override
  _i6.Future<T> exclusively<T>(_i6.Future<T> Function()? action) =>
      (super.noSuchMethod(
            Invocation.method(#exclusively, [action]),
            returnValue:
                _i9.ifNotNull(
                  _i9.dummyValueOrNull<T>(
                    this,
                    Invocation.method(#exclusively, [action]),
                  ),
                  (T v) => _i6.Future<T>.value(v),
                ) ??
                _FakeFuture_14<T>(
                  this,
                  Invocation.method(#exclusively, [action]),
                ),
            returnValueForMissingStub:
                _i9.ifNotNull(
                  _i9.dummyValueOrNull<T>(
                    this,
                    Invocation.method(#exclusively, [action]),
                  ),
                  (T v) => _i6.Future<T>.value(v),
                ) ??
                _FakeFuture_14<T>(
                  this,
                  Invocation.method(#exclusively, [action]),
                ),
          )
          as _i6.Future<T>);
  @override
  _i6.Future<void> batch(_i6.FutureOr<void> Function(_i4.Batch)? runInBatch) =>
      (super.noSuchMethod(
            Invocation.method(#batch, [runInBatch]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);
  @override
  _i6.Future<T> runWithInterceptor<T>(
    _i6.Future<T> Function()? action, {
    required _i4.QueryInterceptor? interceptor,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #runWithInterceptor,
              [action],
              {#interceptor: interceptor},
            ),
            returnValue:
                _i9.ifNotNull(
                  _i9.dummyValueOrNull<T>(
                    this,
                    Invocation.method(
                      #runWithInterceptor,
                      [action],
                      {#interceptor: interceptor},
                    ),
                  ),
                  (T v) => _i6.Future<T>.value(v),
                ) ??
                _FakeFuture_14<T>(
                  this,
                  Invocation.method(
                    #runWithInterceptor,
                    [action],
                    {#interceptor: interceptor},
                  ),
                ),
            returnValueForMissingStub:
                _i9.ifNotNull(
                  _i9.dummyValueOrNull<T>(
                    this,
                    Invocation.method(
                      #runWithInterceptor,
                      [action],
                      {#interceptor: interceptor},
                    ),
                  ),
                  (T v) => _i6.Future<T>.value(v),
                ) ??
                _FakeFuture_14<T>(
                  this,
                  Invocation.method(
                    #runWithInterceptor,
                    [action],
                    {#interceptor: interceptor},
                  ),
                ),
          )
          as _i6.Future<T>);
  @override
  _i4.GenerationContext $write(
    _i4.Component? component, {
    bool? hasMultipleTables,
    int? startIndex,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #$write,
              [component],
              {#hasMultipleTables: hasMultipleTables, #startIndex: startIndex},
            ),
            returnValue: _FakeGenerationContext_22(
              this,
              Invocation.method(
                #$write,
                [component],
                {
                  #hasMultipleTables: hasMultipleTables,
                  #startIndex: startIndex,
                },
              ),
            ),
            returnValueForMissingStub: _FakeGenerationContext_22(
              this,
              Invocation.method(
                #$write,
                [component],
                {
                  #hasMultipleTables: hasMultipleTables,
                  #startIndex: startIndex,
                },
              ),
            ),
          )
          as _i4.GenerationContext);
  @override
  _i4.GenerationContext $writeInsertable(
    _i4.TableInfo<_i4.Table, dynamic>? table,
    _i4.Insertable<dynamic>? insertable, {
    int? startIndex,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #$writeInsertable,
              [table, insertable],
              {#startIndex: startIndex},
            ),
            returnValue: _FakeGenerationContext_22(
              this,
              Invocation.method(
                #$writeInsertable,
                [table, insertable],
                {#startIndex: startIndex},
              ),
            ),
            returnValueForMissingStub: _FakeGenerationContext_22(
              this,
              Invocation.method(
                #$writeInsertable,
                [table, insertable],
                {#startIndex: startIndex},
              ),
            ),
          )
          as _i4.GenerationContext);
  @override
  String $expandVar(int? start, int? amount) =>
      (super.noSuchMethod(
            Invocation.method(#$expandVar, [start, amount]),
            returnValue: _i9.dummyValue<String>(
              this,
              Invocation.method(#$expandVar, [start, amount]),
            ),
            returnValueForMissingStub: _i9.dummyValue<String>(
              this,
              Invocation.method(#$expandVar, [start, amount]),
            ),
          )
          as String);
}

/// A class which mocks [ImageBoulderCache].
///
/// See the documentation for Mockito's code generation for more information.
class MockImageBoulderCache extends _i1.Mock implements _i12.ImageBoulderCache {
  @override
  _i7.CacheManager get cache =>
      (super.noSuchMethod(
            Invocation.getter(#cache),
            returnValue: _FakeCacheManager_23(this, Invocation.getter(#cache)),
            returnValueForMissingStub: _FakeCacheManager_23(
              this,
              Invocation.getter(#cache),
            ),
          )
          as _i7.CacheManager);
}
